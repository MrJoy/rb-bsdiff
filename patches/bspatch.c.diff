--- src/bspatch.c	2005-08-16 15:14:00.000000000 -0700
+++ ext/bspatch.c	2012-12-17 11:28:54.000000000 -0800
@@ -32,10 +32,11 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
-#include <err.h>
 #include <unistd.h>
 #include <fcntl.h>
 
+#include <ruby.h>
+
 static off_t offtin(u_char *buf)
 {
 	off_t y;
@@ -54,7 +55,7 @@
 	return y;
 }
 
-int main(int argc,char * argv[])
+int bspatch_files(const char *oldfile, const char *newfile, const char *patchfile)
 {
 	FILE * f, * cpf, * dpf, * epf;
 	BZFILE * cpfbz2, * dpfbz2, * epfbz2;
@@ -69,11 +70,9 @@
 	off_t lenread;
 	off_t i;
 
-	if(argc!=4) errx(1,"usage: %s oldfile newfile patchfile\n",argv[0]);
-
 	/* Open patch file */
-	if ((f = fopen(argv[3], "r")) == NULL)
-		err(1, "fopen(%s)", argv[3]);
+	if ((f = fopen(patchfile, "r")) == NULL)
+		rb_raise(rb_eRuntimeError, "fopen(%s)", patchfile);
 
 	/*
 	File format:
@@ -92,53 +91,53 @@
 	/* Read header */
 	if (fread(header, 1, 32, f) < 32) {
 		if (feof(f))
-			errx(1, "Corrupt patch\n");
-		err(1, "fread(%s)", argv[3]);
+			rb_raise(rb_eRuntimeError,"Corrupt patch\n");
+		 rb_raise(rb_eRuntimeError, "fread(%s)", patchfile);
 	}
 
 	/* Check for appropriate magic */
 	if (memcmp(header, "BSDIFF40", 8) != 0)
-		errx(1, "Corrupt patch\n");
+		rb_raise(rb_eRuntimeError, "Corrupt patch\n");
 
 	/* Read lengths from header */
 	bzctrllen=offtin(header+8);
 	bzdatalen=offtin(header+16);
 	newsize=offtin(header+24);
 	if((bzctrllen<0) || (bzdatalen<0) || (newsize<0))
-		errx(1,"Corrupt patch\n");
+		rb_raise(rb_eRuntimeError,"Corrupt patch\n");
 
 	/* Close patch file and re-open it via libbzip2 at the right places */
 	if (fclose(f))
-		err(1, "fclose(%s)", argv[3]);
-	if ((cpf = fopen(argv[3], "r")) == NULL)
-		err(1, "fopen(%s)", argv[3]);
+		rb_raise(rb_eRuntimeError, "fclose(%s)", patchfile);
+	if ((cpf = fopen(patchfile, "r")) == NULL)
+		rb_raise(rb_eRuntimeError, "fopen(%s)", patchfile);
 	if (fseeko(cpf, 32, SEEK_SET))
-		err(1, "fseeko(%s, %lld)", argv[3],
+		rb_raise(rb_eRuntimeError, "fseeko(%s, %lld)", patchfile,
 		    (long long)32);
 	if ((cpfbz2 = BZ2_bzReadOpen(&cbz2err, cpf, 0, 0, NULL, 0)) == NULL)
-		errx(1, "BZ2_bzReadOpen, bz2err = %d", cbz2err);
-	if ((dpf = fopen(argv[3], "r")) == NULL)
-		err(1, "fopen(%s)", argv[3]);
+		rb_raise(rb_eRuntimeError, "BZ2_bzReadOpen, bz2err = %d", cbz2err);
+	if ((dpf = fopen(patchfile, "r")) == NULL)
+		rb_raise(rb_eRuntimeError, "fopen(%s)", patchfile);
 	if (fseeko(dpf, 32 + bzctrllen, SEEK_SET))
-		err(1, "fseeko(%s, %lld)", argv[3],
+		rb_raise(rb_eRuntimeError, "fseeko(%s, %lld)", patchfile,
 		    (long long)(32 + bzctrllen));
 	if ((dpfbz2 = BZ2_bzReadOpen(&dbz2err, dpf, 0, 0, NULL, 0)) == NULL)
-		errx(1, "BZ2_bzReadOpen, bz2err = %d", dbz2err);
-	if ((epf = fopen(argv[3], "r")) == NULL)
-		err(1, "fopen(%s)", argv[3]);
+		rb_raise(rb_eRuntimeError, "BZ2_bzReadOpen, bz2err = %d", dbz2err);
+	if ((epf = fopen(patchfile, "r")) == NULL)
+		rb_raise(rb_eRuntimeError, "fopen(%s)", patchfile);
 	if (fseeko(epf, 32 + bzctrllen + bzdatalen, SEEK_SET))
-		err(1, "fseeko(%s, %lld)", argv[3],
+		rb_raise(rb_eRuntimeError, "fseeko(%s, %lld)", patchfile,
 		    (long long)(32 + bzctrllen + bzdatalen));
 	if ((epfbz2 = BZ2_bzReadOpen(&ebz2err, epf, 0, 0, NULL, 0)) == NULL)
-		errx(1, "BZ2_bzReadOpen, bz2err = %d", ebz2err);
+		rb_raise(rb_eRuntimeError, "BZ2_bzReadOpen, bz2err = %d", ebz2err);
 
-	if(((fd=open(argv[1],O_RDONLY,0))<0) ||
+	if(((fd=open(oldfile,O_RDONLY,0))<0) ||
 		((oldsize=lseek(fd,0,SEEK_END))==-1) ||
 		((old=malloc(oldsize+1))==NULL) ||
 		(lseek(fd,0,SEEK_SET)!=0) ||
 		(read(fd,old,oldsize)!=oldsize) ||
-		(close(fd)==-1)) err(1,"%s",argv[1]);
-	if((new=malloc(newsize+1))==NULL) err(1,NULL);
+		(close(fd)==-1)) rb_raise(rb_eRuntimeError,"%s",oldfile);
+	if((new=malloc(newsize+1))==NULL) rb_raise(rb_eRuntimeError,"malloc");
 
 	oldpos=0;newpos=0;
 	while(newpos<newsize) {
@@ -147,19 +146,19 @@
 			lenread = BZ2_bzRead(&cbz2err, cpfbz2, buf, 8);
 			if ((lenread < 8) || ((cbz2err != BZ_OK) &&
 			    (cbz2err != BZ_STREAM_END)))
-				errx(1, "Corrupt patch\n");
+				rb_raise(rb_eRuntimeError, "Corrupt patch\n");
 			ctrl[i]=offtin(buf);
 		};
 
 		/* Sanity-check */
 		if(newpos+ctrl[0]>newsize)
-			errx(1,"Corrupt patch\n");
+			rb_raise(rb_eRuntimeError,"Corrupt patch\n");
 
 		/* Read diff string */
 		lenread = BZ2_bzRead(&dbz2err, dpfbz2, new + newpos, ctrl[0]);
 		if ((lenread < ctrl[0]) ||
 		    ((dbz2err != BZ_OK) && (dbz2err != BZ_STREAM_END)))
-			errx(1, "Corrupt patch\n");
+			rb_raise(rb_eRuntimeError, "Corrupt patch\n");
 
 		/* Add old data to diff string */
 		for(i=0;i<ctrl[0];i++)
@@ -172,13 +171,13 @@
 
 		/* Sanity-check */
 		if(newpos+ctrl[1]>newsize)
-			errx(1,"Corrupt patch\n");
+			rb_raise(rb_eRuntimeError,"Corrupt patch\n");
 
 		/* Read extra string */
 		lenread = BZ2_bzRead(&ebz2err, epfbz2, new + newpos, ctrl[1]);
 		if ((lenread < ctrl[1]) ||
 		    ((ebz2err != BZ_OK) && (ebz2err != BZ_STREAM_END)))
-			errx(1, "Corrupt patch\n");
+			rb_raise(rb_eRuntimeError, "Corrupt patch\n");
 
 		/* Adjust pointers */
 		newpos+=ctrl[1];
@@ -190,12 +189,12 @@
 	BZ2_bzReadClose(&dbz2err, dpfbz2);
 	BZ2_bzReadClose(&ebz2err, epfbz2);
 	if (fclose(cpf) || fclose(dpf) || fclose(epf))
-		err(1, "fclose(%s)", argv[3]);
+		rb_raise(rb_eRuntimeError, "fclose(%s)", patchfile);
 
 	/* Write the new file */
-	if(((fd=open(argv[2],O_CREAT|O_TRUNC|O_WRONLY,0666))<0) ||
+	if(((fd=open(newfile,O_CREAT|O_TRUNC|O_WRONLY,0666))<0) ||
 		(write(fd,new,newsize)!=newsize) || (close(fd)==-1))
-		err(1,"%s",argv[2]);
+		rb_raise(rb_eRuntimeError,"%s",newfile);
 
 	free(new);
 	free(old);
