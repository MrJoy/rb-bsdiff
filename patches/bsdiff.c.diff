--- src/bsdiff.c	2012-12-17 15:20:20.000000000 -0800
+++ ext/bsdiff.c	2012-12-17 15:51:03.000000000 -0800
@@ -3,7 +3,7 @@
  * All rights reserved
  *
  * Redistribution and use in source and binary forms, with or without
- * modification, are permitted providing that the following conditions 
+ * modification, are permitted providing that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
@@ -25,18 +25,21 @@
  */
 
 #include <sys/cdefs.h>
+#if 0
 __FBSDID("$FreeBSD: release/9.0.0/usr.bin/bsdiff/bsdiff/bsdiff.c 164922 2006-12-05 20:22:14Z cperciva $");
+#endif
 
 #include <sys/types.h>
 
 #include <bzlib.h>
-#include <err.h>
 #include <fcntl.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
 
+#include  <ruby.h>
+
 #ifndef O_BINARY
 #define O_BINARY 0
 #endif
@@ -196,13 +199,14 @@
 	if(x<0) buf[7]|=0x80;
 }
 
-int main(int argc,char *argv[])
+/* create a patch file from oldfile diff'ed by newfile */
+int bsdiff_files(const char *oldfile, const char *newfile, const char *patchfile)
 {
 	int fd;
 	u_char *old,*new;
 	off_t oldsize,newsize;
 	off_t *I,*V;
-	off_t scan,pos,len;
+	off_t scan,pos=0,len;
 	off_t lastscan,lastpos,lastoffset;
 	off_t oldscore,scsc;
 	off_t s,Sf,lenf,Sb,lenb;
@@ -216,19 +220,19 @@
 	BZFILE * pfbz2;
 	int bz2err;
 
-	if(argc!=4) errx(1,"usage: %s oldfile newfile patchfile\n",argv[0]);
-
 	/* Allocate oldsize+1 bytes instead of oldsize bytes to ensure
 		that we never try to malloc(0) and get a NULL pointer */
-	if(((fd=open(argv[1],O_RDONLY|O_BINARY,0))<0) ||
+	if(((fd=open(oldfile,O_RDONLY|O_BINARY,0))<0) ||
 		((oldsize=lseek(fd,0,SEEK_END))==-1) ||
 		((old=malloc(oldsize+1))==NULL) ||
 		(lseek(fd,0,SEEK_SET)!=0) ||
 		(read(fd,old,oldsize)!=oldsize) ||
-		(close(fd)==-1)) err(1,"%s",argv[1]);
+		(close(fd)==-1)) {
+    rb_raise(rb_eRuntimeError, "%s",oldfile);
+  }
 
 	if(((I=malloc((oldsize+1)*sizeof(off_t)))==NULL) ||
-		((V=malloc((oldsize+1)*sizeof(off_t)))==NULL)) err(1,NULL);
+		((V=malloc((oldsize+1)*sizeof(off_t)))==NULL)) rb_raise(rb_eRuntimeError, "malloc error");
 
 	qsufsort(I,V,old,oldsize);
 
@@ -236,21 +240,21 @@
 
 	/* Allocate newsize+1 bytes instead of newsize bytes to ensure
 		that we never try to malloc(0) and get a NULL pointer */
-	if(((fd=open(argv[2],O_RDONLY|O_BINARY,0))<0) ||
+	if(((fd=open(newfile,O_RDONLY|O_BINARY,0))<0) ||
 		((newsize=lseek(fd,0,SEEK_END))==-1) ||
 		((new=malloc(newsize+1))==NULL) ||
 		(lseek(fd,0,SEEK_SET)!=0) ||
 		(read(fd,new,newsize)!=newsize) ||
-		(close(fd)==-1)) err(1,"%s",argv[2]);
+		(close(fd)==-1)) rb_raise(rb_eRuntimeError, "%s",newfile);
 
 	if(((db=malloc(newsize+1))==NULL) ||
-		((eb=malloc(newsize+1))==NULL)) err(1,NULL);
+		((eb=malloc(newsize+1))==NULL)) rb_raise(rb_eRuntimeError,"malloc error");
 	dblen=0;
 	eblen=0;
 
 	/* Create the patch file */
-	if ((pf = fopen(argv[3], "wb")) == NULL)
-		err(1, "%s", argv[3]);
+	if ((pf = fopen(patchfile, "wb")) == NULL)
+		rb_raise(rb_eRuntimeError, "%s", patchfile);
 
 	/* Header is
 		0	8	 "BSDIFF40"
@@ -267,11 +271,11 @@
 	offtout(0, header + 16);
 	offtout(newsize, header + 24);
 	if (fwrite(header, 32, 1, pf) != 1)
-		err(1, "fwrite(%s)", argv[3]);
+		rb_raise(rb_eRuntimeError, "fwrite(%s)", patchfile);
 
 	/* Compute the differences, writing ctrl as we go */
 	if ((pfbz2 = BZ2_bzWriteOpen(&bz2err, pf, 9, 0, 0)) == NULL)
-		errx(1, "BZ2_bzWriteOpen, bz2err = %d", bz2err);
+		rb_raise(rb_eRuntimeError, "BZ2_bzWriteOpen, bz2err = %d", bz2err);
 	scan=0;len=0;
 	lastscan=0;lastpos=0;lastoffset=0;
 	while(scan<newsize) {
@@ -286,7 +290,7 @@
 				(old[scsc+lastoffset] == new[scsc]))
 				oldscore++;
 
-			if(((len==oldscore) && (len!=0)) || 
+			if(((len==oldscore) && (len!=0)) ||
 				(len>oldscore+8)) break;
 
 			if((scan+lastoffset<oldsize) &&
@@ -337,17 +341,17 @@
 			offtout(lenf,buf);
 			BZ2_bzWrite(&bz2err, pfbz2, buf, 8);
 			if (bz2err != BZ_OK)
-				errx(1, "BZ2_bzWrite, bz2err = %d", bz2err);
+				rb_raise(rb_eRuntimeError, "BZ2_bzWrite, bz2err = %d", bz2err);
 
 			offtout((scan-lenb)-(lastscan+lenf),buf);
 			BZ2_bzWrite(&bz2err, pfbz2, buf, 8);
 			if (bz2err != BZ_OK)
-				errx(1, "BZ2_bzWrite, bz2err = %d", bz2err);
+				rb_raise(rb_eRuntimeError, "BZ2_bzWrite, bz2err = %d", bz2err);
 
 			offtout((pos-lenb)-(lastpos+lenf),buf);
 			BZ2_bzWrite(&bz2err, pfbz2, buf, 8);
 			if (bz2err != BZ_OK)
-				errx(1, "BZ2_bzWrite, bz2err = %d", bz2err);
+				rb_raise(rb_eRuntimeError, "BZ2_bzWrite, bz2err = %d", bz2err);
 
 			lastscan=scan-lenb;
 			lastpos=pos-lenb;
@@ -356,45 +360,45 @@
 	};
 	BZ2_bzWriteClose(&bz2err, pfbz2, 0, NULL, NULL);
 	if (bz2err != BZ_OK)
-		errx(1, "BZ2_bzWriteClose, bz2err = %d", bz2err);
+		rb_raise(rb_eRuntimeError, "BZ2_bzWriteClose, bz2err = %d", bz2err);
 
 	/* Compute size of compressed ctrl data */
 	if ((len = ftello(pf)) == -1)
-		err(1, "ftello");
+		rb_raise(rb_eRuntimeError, "ftello");
 	offtout(len-32, header + 8);
 
 	/* Write compressed diff data */
 	if ((pfbz2 = BZ2_bzWriteOpen(&bz2err, pf, 9, 0, 0)) == NULL)
-		errx(1, "BZ2_bzWriteOpen, bz2err = %d", bz2err);
+		rb_raise(rb_eRuntimeError, "BZ2_bzWriteOpen, bz2err = %d", bz2err);
 	BZ2_bzWrite(&bz2err, pfbz2, db, dblen);
 	if (bz2err != BZ_OK)
-		errx(1, "BZ2_bzWrite, bz2err = %d", bz2err);
+		rb_raise(rb_eRuntimeError, "BZ2_bzWrite, bz2err = %d", bz2err);
 	BZ2_bzWriteClose(&bz2err, pfbz2, 0, NULL, NULL);
 	if (bz2err != BZ_OK)
-		errx(1, "BZ2_bzWriteClose, bz2err = %d", bz2err);
+		rb_raise(rb_eRuntimeError, "BZ2_bzWriteClose, bz2err = %d", bz2err);
 
 	/* Compute size of compressed diff data */
 	if ((newsize = ftello(pf)) == -1)
-		err(1, "ftello");
+		rb_raise(rb_eRuntimeError, "ftello");
 	offtout(newsize - len, header + 16);
 
 	/* Write compressed extra data */
 	if ((pfbz2 = BZ2_bzWriteOpen(&bz2err, pf, 9, 0, 0)) == NULL)
-		errx(1, "BZ2_bzWriteOpen, bz2err = %d", bz2err);
+		rb_raise(rb_eRuntimeError, "BZ2_bzWriteOpen, bz2err = %d", bz2err);
 	BZ2_bzWrite(&bz2err, pfbz2, eb, eblen);
 	if (bz2err != BZ_OK)
-		errx(1, "BZ2_bzWrite, bz2err = %d", bz2err);
+		rb_raise(rb_eRuntimeError, "BZ2_bzWrite, bz2err = %d", bz2err);
 	BZ2_bzWriteClose(&bz2err, pfbz2, 0, NULL, NULL);
 	if (bz2err != BZ_OK)
-		errx(1, "BZ2_bzWriteClose, bz2err = %d", bz2err);
+		rb_raise(rb_eRuntimeError, "BZ2_bzWriteClose, bz2err = %d", bz2err);
 
 	/* Seek to the beginning, write the header, and close the file */
 	if (fseeko(pf, 0, SEEK_SET))
-		err(1, "fseeko");
+		rb_raise(rb_eRuntimeError, "fseeko");
 	if (fwrite(header, 32, 1, pf) != 1)
-		err(1, "fwrite(%s)", argv[3]);
+		rb_raise(rb_eRuntimeError, "fwrite(%s)", patchfile);
 	if (fclose(pf))
-		err(1, "fclose");
+		rb_raise(rb_eRuntimeError, "fclose");
 
 	/* Free the memory we used */
 	free(db);
@@ -405,3 +409,14 @@
 
 	return 0;
 }
+
+/*
+ * create a patch buffer from oldbfufer diff'ed by newbfufer
+ *
+ * same as bsdiff_files, except works in memory
+ *
+ * TODO
+ */
+//char* bsdiff_buffer(const char *oldbuffer, const char *newbuffer)
+//{
+//}
